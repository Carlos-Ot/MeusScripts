#!/bin/bash
# ----------------------------------------------------------------------------
# Monitor do Sistema
#
# Uso: ./monitor
#
# Autor: Frank Junior <frankcbjunior@gmail.com>
# Desde: 2013-07-22
# Versão: 1
# ----------------------------------------------------------------------------

# Variáveis
# ----------------------------------------------------------------------------

# cores
cor_amarelo="\033[33m"
fecha_cor="\033[m"

# Funcoes
# ----------------------------------------------------------------------------

# funcao para verificar o SO corrente e chamar seus respectivos comandos
function verifica_so(){
local current_so="$(uname -s)"
case "$current_so" in
		Linux)
			# comandos do Linux
			usuario_comando="\t"$(whoami)" - "$(uptime | cut -d " " -f4-5 | sed s/,//)""
			hostname_comando="\t"$(hostname)""
			SO_comando="\t\t"$(uname -s)""
			distribuicao_comando="\t"$(lsb_release -sd)""
			memoria_comando="\t$(free -g | grep "Mem" | cut -d ":" -f2 | sed s/\ //g | cut -c1)G"
			processador_comando="\t"$(grep "model name" /proc/cpuinfo | uniq | cut -d ":" -f2 | sed s/\ //)"\
					x"$(grep "model name" /proc/cpuinfo | wc -l)""
			arquitetura_comando="\t"$(arch)""
			;;
		Darwin)
			# comandos do Mac
			usuario_comando="\t"$(whoami)" - "$(uptime | cut -d " " -f5-6 | sed s/,//)""
			hostname_comando="\t"$(hostname)""
			computador_comando="\t$(get_info_mac 'SPHardwareDataType' 'Model Name')"
			versao_comando="\t\t$(get_info_mac 'SPSoftwareDataType' 'System Version')"
			memoria_comando="\t$(get_info_mac 'SPHardwareDataType' 'Memory')"
			processador_comando="\t$(get_info_mac 'SPHardwareDataType' 'Processor Name') \
				$(get_info_mac 'SPHardwareDataType' 'Processor Speed')"
			arquitetura_comando="\t"$(arch)""
			;;
		cygwin)
			# comandos do Cygwin
			usuario_comando="ainda nao implementado"
			hostname_comando="ainda nao implementado"
			SO_comando="ainda nao implementado"
			distribuicao_comando="ainda nao implementado"
			memoria_comando="ainda nao implementado"
			processador_comando="ainda nao implementado"
			arquitetura_comando="ainda nao implementado"
			echo "estou no cygwin"
			;;
		*)
			echo "Sistema Operacional incompatível com o script"
			exit 1
			;;
esac
}

# funcao para pegar as informacoes do MacOS baseado no 'system_profiler'
function get_info_mac(){
	system_profiler "$1" | grep "$2" | cut -d ":" -f2 | cut -c2-
}

# Main
# ----------------------------------------------------------------------------

verifica_so

echo -e "${cor_amarelo}usuario:${fecha_cor}${usuario_comando}"
echo -e "${cor_amarelo}hostname:${fecha_cor}${hostname_comando}"
if [ $(uname -s) = 'Linux' ]; then
	echo -e "${cor_amarelo}SO:${fecha_cor}${SO_comando}"
	echo -e "${cor_amarelo}distribuicao:${fecha_cor}${distribuicao_comando}"
elif [ $(uname -s) = 'Darwin' ]; then
	echo -e "${cor_amarelo}computador:${fecha_cor}${computador_comando}"
	echo -e "${cor_amarelo}versao:${fecha_cor}$versao_comando}"
fi
echo -e "${cor_amarelo}memoria:${fecha_cor}${memoria_comando}"
echo -e "${cor_amarelo}processador:${fecha_cor}"${processador_comando}""
echo -e "${cor_amarelo}arquitetura:${fecha_cor}${arquitetura_comando}"
